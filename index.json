[{"authors":["admin"],"categories":null,"content":"I am currently working a Post-Doc Research Scientist at the Singapore Management University. I hold a Ph.D. in Computer Science from the Lahore University of Management Sciences (LUMS). My research interests include software reuse, code recommendation systems and information retrieval. My Ph.D. thesis is titled \u0026ldquo;Feature-driven API usage-based Code Example Recommendation for Opportunistic Reuse\u0026rdquo;.\n","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://shamsa-abid.github.io/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/admin/","section":"authors","summary":"I am currently working a Post-Doc Research Scientist at the Singapore Management University. I hold a Ph.D. in Computer Science from the Lahore University of Management Sciences (LUMS). My research interests include software reuse, code recommendation systems and information retrieval. My Ph.D. thesis is titled \u0026ldquo;Feature-driven API usage-based Code Example Recommendation for Opportunistic Reuse\u0026rdquo;.","tags":null,"title":"Shamsa Abid","type":"authors"},{"authors":["Maha Kamal; Ayman Abaid; Shamsa Abid; Shafay Shamail"],"categories":[],"content":"","date":1638476581,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1638476581,"objectID":"fbf2f1cdf88dc3f847ae7036affbdcbb","permalink":"https://shamsa-abid.github.io/publication/facer-as/","publishdate":"2021-12-03T01:23:01+05:00","relpermalink":"/publication/facer-as/","section":"publication","summary":"Android developers often need to search for example code to complete their development tasks. While existing code search systems for Android can deliver code against a search query, they do not recommend code for features that a developer might later need to implement. In this paper, we present FACER-AS (FACER for Android Studio); an Android Studio plugin, which uses FACER (Feature-driven API usage-based Code Examples Recommender) as its back-end code search and recommendation engine. FACER provides relevant code against natural language queries (Stage 1) and also recommends code of multiple related features (Stage 2) to facilitate opportunistic code reuse. To evaluate FACER-AS, we perform a user study involving one professional Android developer who uses our tool for the development of their ongoing live Android projects. We analyze the developer's usage of our tool over a span of seven days and find that FACER-AS achieves a 79% success rate for retrieving code against user queries (Stage 1) and a 41% success rate for recommending code for related features (Stage 2). We also observe a 43% reuse rate of Stage 1 recommendations and a 45% reuse rate of Stage 2 recommendations. Our tool's performance analysis and the developer's positive feedback show that FACER-AS can help Android developers with their coding activities. A video demonstration of our tool is available at https://youtu.be/3yN-39wP_FU and the source code of our tool is available at https://doi.org/10.5281/zenodo.5176816.","tags":[],"title":"FACER-AS: An API Usage-based Code Recommendation Tool for Android Studio","type":"publication"},{"authors":["Shamsa Abid"],"categories":[],"content":"","date":1638472288,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1638472288,"objectID":"bbd5c6b647c21dedff4784d1fb42e5b2","permalink":"https://shamsa-abid.github.io/project/phdthesis/","publishdate":"2021-12-03T00:11:28+05:00","relpermalink":"/project/phdthesis/","section":"project","summary":"Software developers need to search for reusable code that would assist them in implementing a given feature or development task. Often, the timely discovery of a critical piece of information can have a dramatic impact on productivity. Current code search systems focus on providing code against a specific user query and repeated searches need to be performed until the code for the desired feature or set of features is found. The problem of repeated code searches needs to be addressed and a solution is desired for helping developers to get the code for related features, thus enabling opportunistic reuse for increased developer productivity. We propose FACER (Feature-driven API usage-based Code Examples Recommender), a recommendation system that provides developers with method recommendations having functionality relevant to their feature or development task. The main idea behind FACER is to provide code recommendations against a feature query based on patterns of frequently co-occurring API usage-based Method Clone Classes. Such patterns are called Method Clone Structures (MCS).","tags":[],"title":"PhD Thesis","type":"project"},{"authors":["Shamsa Abid","Shafay Shamail","Hamid Abdul Basit","Sarah Nadi"],"categories":[],"content":"","date":1629158400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1629158400,"objectID":"a1aebc115ea6cfe8636bb76c665252f7","permalink":"https://shamsa-abid.github.io/publication/pub_facer_emse/","publishdate":"2021-08-17T00:00:00Z","relpermalink":"/publication/pub_facer_emse/","section":"publication","summary":"To save time, developers often search for code examples that implement their desired software features. Existing code search techniques typically focus on finding code snippets for a single given query, which means that developers need to perform a separate search for each desired functionality. In this paper, we propose FACER (Feature-driven API usage-based Code Examples Recommender, a technique that avoids repeated searches through opportunistic reuse. Specifically, given the selected code snippet that matches the initial search query, FACER finds and suggests related code snippets that represent features that the developer may want to implement next. FACER first constructs a code fact repository by parsing the source code of open-source Java projects to obtain methods' textual information, call graphs, and Application Programming Interface (API) usages. It then detects unique features by clustering methods based on similar API usages, where each cluster represents a feature or functionality. Finally, it detects frequently co-occurring features across projects using frequent pattern mining and recommends related methods from the mined patterns. To evaluate FACER, we run it on 120 Java Android apps from GitHub. We first manually validate that the detected method clusters represent methods with similar functionality. We then perform an automated evaluation to determine the best parameters (e.g., similarity threshold) for FACER. We recruit 10 professional developers along with 39 experienced students to judge FACER's recommendation of related methods. Our results show that, on average, FACER's recommendations are 80% precise. We also survey a total of 20 professional Android and Java developers to understand their code search and reuse experiences, and also to obtain their feedback on the usability and usefulness of FACER. The survey results show that 95% of our surveyed professional developers find the idea of related method recommendations useful during code reuse.","tags":[],"title":"FACER: An API Usage-based Code-example Recommender for Opportunistic Reuse","type":"publication"},{"authors":["Shamsa Abid"],"categories":[],"content":"","date":1565568000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1565568000,"objectID":"018f980517687c2bb2377d5357c77b8d","permalink":"https://shamsa-abid.github.io/publication/pub_facer/","publishdate":"2019-11-29T15:38:16+05:00","relpermalink":"/publication/pub_facer/","section":"publication","summary":"Developers need to be able to find reusable code for desired software features in a way that supports opportunistic programming for increased developer productivity. Our objective is to develop a recommendation system that provides a developer with function recommendations having functionality relevant to her development task. We employ a combination of information retrieval, static code analysis and data mining techniques to build the proposed recommendation system called FACER (Feature-driven API usage-based Code Examples Recommender). We performed an experimental evaluation on 122 projects from GitHub from selected categories to determine the accuracy of the retrieved code for related features. FACER recommended functions with a precision of 54% and 75% when evaluated using automated and manual methods respectively.","tags":[],"title":"Recommending Related Functions from API Usage-Based Function Clone Structures","type":"publication"},{"authors":["Shamsa Abid","Salman Javed","Momna Naseem","Suleman Shahid","Hamid Abdul Basit","Yoshiki Higo"],"categories":[],"content":"","date":1490572800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1490572800,"objectID":"ae78bc1fa2e3af3ac8d6494950b30dfe","permalink":"https://shamsa-abid.github.io/publication/pub_codeease/","publishdate":"2017-03-27T00:00:00Z","relpermalink":"/publication/pub_codeease/","section":"publication","summary":"Searching for code examples on the Internet is commonly and frequently performed by software developers but wastes a lot of their time and reduces their productivity. To aid developers with this problem, a system is needed that can allow them to get appropriate code recommendations for reuse within the IDE. In this paper, we present our prototype tool CodeEase, developed as an Eclipse plugin, which generates method recommendations against the code of the developer. The recommendations are based on clone detection and an analysis of Method Clone Structures (MCS) - a type of structural clones- from a large repository of code.","tags":[],"title":"CodeEase: Harnessing Method Clone Structures for Reuse","type":"publication"},{"authors":["Shamsa Abid","Zohaa Qamar","Natasha Khan","Muhammad Shayan","Hamid Abdul Basit"],"categories":[],"content":"","date":1480982400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1480982400,"objectID":"915a3fe103f4c3045462c993a3ad02cb","permalink":"https://shamsa-abid.github.io/publication/pub_dpers/","publishdate":"2016-12-06T00:00:00Z","relpermalink":"/publication/pub_dpers/","section":"publication","summary":"Software design patterns provide well-known solutions to recurring problems faced by developers. However, not all developers are proficient with the use of design patterns. To facilitate developers in this regard, we propose a design pattern usage examples retrieval system. The retrieval is based on analyzing the developer's development context to provide design pattern usage examples from projects that have a similar functional domain to that of the developer. In our approach, the Latent Dirichlet Allocation model is used to extract domain keywords from individual projects' source code. The domain keywords are stored in a fact repository and are used to construct the respective projects' profiles. We perform content-based retrieval by using a developer's domain keywords to retrieve only matching projects and their associated design patterns-based code (as design pattern usage examples) from the fact repository. Quantitative and qualitative analysis of the results from internal experiments and a user study indicate that our system provides fairly accurate results.","tags":[],"title":"Retrieving Design Pattern Usage Examples using Domain Matching","type":"publication"},{"authors":["Shamsa Abid","Hamid Abdul Basit"],"categories":[],"content":"","date":1463961600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1463961600,"objectID":"29f77e3421389b827f8e9669687c23c7","permalink":"https://shamsa-abid.github.io/publication/pub_towardsrecsys/","publishdate":"2016-05-23T00:00:00Z","relpermalink":"/publication/pub_towardsrecsys/","section":"publication","summary":"Structural clones cover all kinds of large-granularity repeated program structures such as similar methods, classes, directories, and their recurring combinations. We can use these structural clones to enable code completion by means of identification and recommendation of suitable candidates from a large code repository. By providing a user with recommendations based on Method Clone Structures (MCS) -- a type of structural clones -- mined from a large code repository, we are increasing our chances of recommending a set of methods that the developer is highly likely to use. The market basket analysis philosophy is implicitly manifested in our recommendation approach.","tags":[],"title":"Towards a Structural Clone Based Recommender System","type":"publication"},{"authors":["Shamsa Abid","Hamid Abdul Basit","Naveed Arshad"],"categories":[],"content":"","date":1434931200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1434931200,"objectID":"7e1d76df2c90546c8140f8fc0f9eddc6","permalink":"https://shamsa-abid.github.io/publication/pub_reflectionsonrefactoring/","publishdate":"2015-06-22T00:00:00Z","relpermalink":"/publication/pub_reflectionsonrefactoring/","section":"publication","summary":"Teaching refactoring effectively while making students realize the importance and benefits of refactoring is a challenge. In this direction, an experiment was carried out while conducting the course project for the Refactoring and Design Patterns course. This paper discusses the results of the experiment that involved two different project schemes to carry out refactoring activities on the same code base. One scheme was post-enhancement refactoring and the other was pre-enhancement refactoring. The aim of the experiment was to decide which scheme was beneficial in terms of better understanding, appreciation, and implementation of refactoring.","tags":[],"title":"Reflections on Teaching Refactoring: A Tale of Two Projects","type":"publication"}]