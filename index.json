[{"authors":["admin"],"categories":null,"content":"I am currently an Assistant Professor at the National University of Computer and Emerging Sciences, FAST, Chiniot-Faisalabad Campus in Pakistan. I work on research broadly related to AI for Software Engineering. My current research interests are evaluating \u0026ldquo;code generation quality of LLMs\u0026rdquo;, using \u0026ldquo;LLMs for requirements validation\u0026rdquo;, and \u0026ldquo;Interpretability of AI Models\u0026rdquo;. This research builds on my recent Post-Doctoral experience as a Research Scientist at the Research for Intelligent Software Engineering (RISE) laboratory at Singapore Management University (SMU), ranked second globally for software engineering research. My work at SMU involved evaluating human-model alignment for deep-learning-based AI systems, with a particular focus on causal explainability. As part of the Science of Certified AI systems project, funded by the Ministry of Education, I worked with my supervisor Prof. Lingxiao Jiang, to develop methodologies to evaluate the trustworthiness of AI models for code-relevant tasks.\nI obtained my PhD degree in Computer Science from the Lahore University of Management Sciences (LUMS), Pakistan in 2021. My Ph.D. was supervised by Prof. Dr. Shafay Shamail and my PhD committee members included Dr. Hamid Abdul Basit, Dr. Basit Shafique, and Dr. Naveed Arshad. My Ph.D. thesis is titled \u0026ldquo;Feature-driven API usage-based Code Example Recommendation for Opportunistic Reuse\u0026rdquo;.\nI\u0026rsquo;m a detail-oriented academic aiming to excel in everything I do. I’m deeply invested in making meaningful contributions to my field and approach every opportunity with curiosity, a drive to learn, and a dedication to helping others grow.\nI excel in environments where creativity, critical thinking, and collaboration intersect, and my work is grounded in balance, empathy, and a deep desire to make a positive impact.\nMy biggest flex? My excellent English communication skills, which allow me to ask compelling, thought-provoking questions. These questions have not only sparked meaningful conversations but also opened doors to countless opportunities and earned me valuable visibility.\n","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://shamsa-abid.github.io/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/admin/","section":"authors","summary":"I am currently an Assistant Professor at the National University of Computer and Emerging Sciences, FAST, Chiniot-Faisalabad Campus in Pakistan. I work on research broadly related to AI for Software Engineering. My current research interests are evaluating \u0026ldquo;code generation quality of LLMs\u0026rdquo;, using \u0026ldquo;LLMs for requirements validation\u0026rdquo;, and \u0026ldquo;Interpretability of AI Models\u0026rdquo;. This research builds on my recent Post-Doctoral experience as a Research Scientist at the Research for Intelligent Software Engineering (RISE) laboratory at Singapore Management University (SMU), ranked second globally for software engineering research.","tags":null,"title":"Dr. Shamsa Abid","type":"authors"},{"authors":["Shamsa Abid; Xuemeng Cai; Lingxiao Jiang"],"categories":[],"content":"","date":1734553381,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1734553381,"objectID":"abeb918be9b9ffc9d7cdcb97955d45a6","permalink":"https://shamsa-abid.github.io/publication/pub_causal/","publishdate":"2023-10-02T01:23:01+05:00","relpermalink":"/publication/pub_causal/","section":"publication","summary":"Deep Neural Network-based models have demonstrated high accuracy for semantic code clone detection. However, the lack of generalization poses a threat to the trustworthiness and reliability of these models. Furthermore, the black-box nature of these models makes interpreting the model’s decisions very challenging. Currently, there is only a limited understanding of the semantic code clone detection behavior of existing models. There is a lack of transparency in understanding how a model identifies semantic code clones and the exact code components influencing its prediction. In this paper, we introduce the use of a causal interpretation framework based on the Neyman-Rubin causal model to gain insight into the decision-making of four state-of-the-art clone detection models. Using the causal interpretation framework, we derive causal explanations of models’ decisions by performing interventions guided by expert-labeled data. We measure the alignment of models’ decision-making with expert intuition by evaluating the causal effects of code similarities and differences on the clone predictions of the models. Additionally, we evaluate the similarity intuition alignment, robustness to confounding influences, and prediction consistency of the models. Finally, we rank the models in order of most aligned and thus most reliable to least aligned and thus least reliable for semantic code clone detection. Our contributions lay a foundation for building and evaluating trustworthy semantic code clone detection systems.","tags":[],"title":"Measuring model alignment for code clone detection using causal interpretation","type":"publication"},{"authors":["Shamsa Abid; Xuemeng Cai; Lingxiao Jiang"],"categories":[],"content":"","date":1701634981,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1701634981,"objectID":"d733eacb05e42ea81226022440e94623","permalink":"https://shamsa-abid.github.io/publication/pub_codebertinterpret/","publishdate":"2023-10-02T01:23:01+05:00","relpermalink":"/publication/pub_codebertinterpret/","section":"publication","summary":"Accurate detection of semantic code clones has many applications in software engineering but is challenging because of lexical, syntactic, or structural dissimilarities in code. CodeBERT, a popular deep neural network based pre-trained code model, can detect code clones with a high accuracy. However, its performance on unseen data is reported to be lower. A challenge is to interpret CodeBERT's clone detection behavior and isolate the causes of mispredictions. In this paper, we evaluate CodeBERT and interpret its clone detection behavior on the SemanticCloneBench dataset focusing on Java and Python clone pairs. We introduce the use of a black-box model interpretation technique, SHAP, to identify the core features of code that CodeBERT pays attention to for clone prediction. We first perform a manual similarity analysis over a sample of clone pairs to revise clone labels and to assign labels to statements indicating their contribution to core functionality. We then evaluate the correlation between the human and model's interpretation of core features of code as a measure of CodeBERT's trustworthiness. We observe only a weak correlation. Finally, we present examples on how to identify causes of mispredictions for CodeBERT. Our technique can help researchers to assess and fine-tune their models' performance.","tags":[],"title":"Interpreting CodeBERT for Semantic Code Clone Detection","type":"publication"},{"authors":["Shamsa Abid"],"categories":["LUMS"],"content":"","date":1698952288,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1698952288,"objectID":"a7d7ffc8fa8d4e9ae7613feefc6f9fc8","permalink":"https://shamsa-abid.github.io/project/lumsxaiseminar/","publishdate":"2023-11-03T00:11:28+05:00","relpermalink":"/project/lumsxaiseminar/","section":"project","summary":"Semantic code clone detection remains a challenging task in the realm of software engineering. While AI models are reportedly accurate, they often fail to generalize to other codebases, raising questions about their reliability and trustworthiness. We need ways to understand or interpret the decision-making behavior of the code models and evaluate whether it aligns with human intuition. In this talk, I will discuss how we can interpret the causes of mispredictions of code models. Furthermore, I will discuss how we perform a causal analysis by systematically perturbing code clone pairs to examine shifts in prediction. Our findings have practical implications, aiding researchers and end-users in choosing code clone detection models more effectively.","tags":[],"title":"Why P not Q? Interpreting Code Models Decision Making","type":"project"},{"authors":["Shamsa Abid"],"categories":["SMU"],"content":"","date":1697742688,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1697742688,"objectID":"29f4f10fe0f524867bb454cae7f4b09c","permalink":"https://shamsa-abid.github.io/project/smuxaiseminar/","publishdate":"2023-10-20T00:11:28+05:00","relpermalink":"/project/smuxaiseminar/","section":"project","summary":"Semantic code clone detection remains a challenging task in the realm of software engineering. While AI models are reportedly accurate, they often fail to generalize to other codebases, raising questions about their reliability and trustworthiness. We need ways to understand or interpret the decision-making behavior of the code models and evaluate whether it aligns with human intuition. In this direction, our goal is to evaluate the performance of models in relation to human intuition using counterfactual data mutations. In this talk, I will discuss how we create a human-labeled dataset of code regions of core and non-core similarities and differences, and how we perturb code clone pairs systematically to examine shifts in prediction. Our findings have practical implications, aiding researchers and end-users in choosing code clone detection models more effectively.","tags":[],"title":"Unveiling the Code Model Enigma: Interpreting the Gap Between AI and Human Intuition in Code Clone Detection","type":"project"},{"authors":["Saad Arshad; Shamsa Abid; Shafay Shamail"],"categories":[],"content":"","date":1670962981,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1670962981,"objectID":"cba9db9685ac1afb4e88163da5d9a469","permalink":"https://shamsa-abid.github.io/publication/pub_codebertrepl/","publishdate":"2022-12-14T01:23:01+05:00","relpermalink":"/publication/pub_codebertrepl/","section":"publication","summary":"Large pre-trained models have dramatically improved the state-of-the-art on a variety of natural language processing (NLP) tasks. CodeBERT is one such pre-trained model for natural language (NL) and programming language (PL) which captures the semantics in natural language and programming language, and produces general-purpose representations. While it has been shown to support natural language code search and code documentation generation tasks, its effectiveness for code clone detection is not explored in depth. In this paper, we aim to replicate and evaluate the performance of CodeBERT for code clone detection on multiple datasets with varying functionalities to understand (1) whether CodeBERT can generalize to unseen code, (2) how fine-tuning can effect CodeBERT’s performance on unseen code, and (3) how CodeBERT performs for detecting various code clone types. To this end, we consider three different datasets of Java methods. We derive the first dataset from Big-CloneBench. We use Java clone pairs from SemanticCloneBench to derive our second dataset, and our third dataset consists of Java methods from Android applications. Our experiments indicate that CodeBERT performs the best for detecting Type-1 and Type-4 clones with a 100% and 96% recall on average respectively. We also find that there is limited generalizability on unseen functionalities where recall drops by 15% and 40% on the SemanticCloneBench and Android datasets respectively. Furthermore, we observe that fine-tuning can improve the recall by 22% and 30% on the SemanticCloneBench and Android datasets respectively.","tags":[],"title":"CodeBERT for Code Clone Detection: A Replication Study","type":"publication"},{"authors":["Shamsa Abid; Hamid Abdul Basit; Shafay Shamail"],"categories":[],"content":"","date":1667766181,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1667766181,"objectID":"291d718278e54dc53e2426de9d028f01","permalink":"https://shamsa-abid.github.io/publication/pub_contextfacer/","publishdate":"2022-11-07T01:23:01+05:00","relpermalink":"/publication/pub_contextfacer/","section":"publication","summary":"Developers spend a lot of time online, searching for code to help them implement their desired features. While code recommenders help improve developers’ productivity, there is currently no support for context-aware code recommendation for opportunistic code reuse on-the-go. Typical code recommendation systems provide recommendations against a search query, whereas a code recommender that supports opportunistic reuse can recommend related code snippets that represent features that the developer may want to implement next. In this paper, we present a novel Context-aware Feature-driven API usage-based Code Recommender (CA-FACER) tool, which is an Intellij IDEA plugin that leverages a developer’s development context to recommend related code snippets. We consider the methods having API usages in a developer’s active project as part of the development context. Our approach uses contextual data from a developer’s active project to find similar projects and recommends code from popular features of those projects. The popular features are identified as frequently occurring API usage based Method Clone Classes. From our experimental evaluation on 120 Android Java projects from GitHub, we observe a 46% improvement of precision using our proposed context-aware approach over a baseline system. Our technique recommends related code examples with an average precision (P@5) of 94% and 83% and a success rate of 90% and 95% for initial and evolved development stages respectively. A video demonstration of our tool is available at https://youtu.be/UjuM8WRc318.","tags":[],"title":"Context-aware code recommendation in Intellij IDEA","type":"publication"},{"authors":["Sohaib Masood Rabbani; Nabeel Ahmad Gulzar; Saad Arshad; Shamsa Abid; Shafay Shamail"],"categories":[],"content":"","date":1664655781,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1664655781,"objectID":"ef045b1c2ed6f876f4cf0e2100d3f032","permalink":"https://shamsa-abid.github.io/publication/pub_codebert4semclone/","publishdate":"2022-10-02T01:23:01+05:00","relpermalink":"/publication/pub_codebert4semclone/","section":"publication","summary":"Semantic code clone detection involves the detection of functionally similar code fragments which may otherwise be lexically, syntactically, or structurally dissimilar. The detection of semantic code clones has important applications in aspect mining and product line analysis. The accurate detection of semantic code clones is a challenging task and various techniques have been proposed. However, the evaluation of these techniques is performed using various datasets and we do not have a clear picture of the performance of these techniques relative to each other. Recently, SemanticCloneBench has been introduced as a benchmark for semantic clones. Now, we can use the SemanticCloneBench to effectively evaluate and compare the performance of semantic code clone detection techniques. In this paper, we compare the semantic code clone detection performance of three different code clone detection techniques namely FACER-CD, CodeBERT and NIL for Java code clones using SemanticCloneBench. FACER-CD performs API usage similarity-based clustering to detect clones, while CodeBERT is a deep-learning based approach which uses a pre-trained programming language model, and NIL is a token-based large-gapped code clones detector. FACER-CD, NIL, and CodeBERT show a recall of 64.3%, 12.7%, and 83.2% respectively on SemanticCloneBench. Using all three techniques together on the SemanticCloneBench dataset gives us an overall recall of 95.5% which is currently the best performance achieved on SemanticCloneBench.","tags":[],"title":"A Comparative Analysis of Clone Detection Techniques on SemanticCloneBench","type":"publication"},{"authors":["Maha Kamal; Ayman Abaid; Shamsa Abid; Shafay Shamail"],"categories":[],"content":"","date":1638476581,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1638476581,"objectID":"fbf2f1cdf88dc3f847ae7036affbdcbb","permalink":"https://shamsa-abid.github.io/publication/facer-as/","publishdate":"2021-12-03T01:23:01+05:00","relpermalink":"/publication/facer-as/","section":"publication","summary":"Android developers often need to search for example code to complete their development tasks. While existing code search systems for Android can deliver code against a search query, they do not recommend code for features that a developer might later need to implement. In this paper, we present FACER-AS (FACER for Android Studio); an Android Studio plugin, which uses FACER (Feature-driven API usage-based Code Examples Recommender) as its back-end code search and recommendation engine. FACER provides relevant code against natural language queries (Stage 1) and also recommends code of multiple related features (Stage 2) to facilitate opportunistic code reuse. To evaluate FACER-AS, we perform a user study involving one professional Android developer who uses our tool for the development of their ongoing live Android projects. We analyze the developer's usage of our tool over a span of seven days and find that FACER-AS achieves a 79% success rate for retrieving code against user queries (Stage 1) and a 41% success rate for recommending code for related features (Stage 2). We also observe a 43% reuse rate of Stage 1 recommendations and a 45% reuse rate of Stage 2 recommendations. Our tool's performance analysis and the developer's positive feedback show that FACER-AS can help Android developers with their coding activities. A video demonstration of our tool is available at https://youtu.be/3yN-39wP_FU and the source code of our tool is available at https://doi.org/10.5281/zenodo.5176816.","tags":[],"title":"FACER-AS: An API Usage-based Code Recommendation Tool for Android Studio","type":"publication"},{"authors":["Shamsa Abid"],"categories":[],"content":"","date":1638472288,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1638472288,"objectID":"bbd5c6b647c21dedff4784d1fb42e5b2","permalink":"https://shamsa-abid.github.io/project/phdthesis/","publishdate":"2021-12-03T00:11:28+05:00","relpermalink":"/project/phdthesis/","section":"project","summary":"Software developers need to search for reusable code that would assist them in implementing a given feature or development task. Often, the timely discovery of a critical piece of information can have a dramatic impact on productivity. Current code search systems focus on providing code against a specific user query and repeated searches need to be performed until the code for the desired feature or set of features is found. The problem of repeated code searches needs to be addressed and a solution is desired for helping developers to get the code for related features, thus enabling opportunistic reuse for increased developer productivity. We propose FACER (Feature-driven API usage-based Code Examples Recommender), a recommendation system that provides developers with method recommendations having functionality relevant to their feature or development task. The main idea behind FACER is to provide code recommendations against a feature query based on patterns of frequently co-occurring API usage-based Method Clone Classes. Such patterns are called Method Clone Structures (MCS).","tags":[],"title":"PhD Thesis Defense","type":"project"},{"authors":["Shamsa Abid"],"categories":["LUMS"],"content":"","date":1633201888,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1633201888,"objectID":"ccb57d9df7aca47e67522c72d40c2b7d","permalink":"https://shamsa-abid.github.io/project/lumsseminar1/","publishdate":"2021-10-03T00:11:28+05:00","relpermalink":"/project/lumsseminar1/","section":"project","summary":"Semantic code clone detection involves the detection of functionally similar code fragments which may otherwise be lexically, syntactically, or structurally dissimilar. The detection of semantic code clones has applications in aspect mining and product line analysis. Semantic code clones have recently been used by a code recommendation system called FACER to model commonly co-occurring functionality across multiple software projects for recommending related code. In this paper, we compare the semantic code clone detection performance of FACER's API usage similarity-based clustering approach (FACER-CD) against a deep-learning based approach which uses a pre-trained programming language model called CodeBERT. We perform our evaluation on two datasets; a benchmark dataset of Java code clones (BigCloneBench) and another dataset consisting of Java code from Android applications. Our experiments indicate that CodeBERT outperforms FACER-CD on the BigCloneBench dataset by a 33% higher accuracy. However, FACER-CD outperforms CodeBERT by a 31% higher accuracy on the Android dataset. We find that by training CodeBERT on the Android dataset, the difference of accuracy between FACER-CD and CodeBERT is minimized, with CodeBERT outperforming FACER-CD by a 6% higher accuracy and FACER-CD outperforming CodeBERT by a 1% higher precision. Furthermore, we observe that CodeBERT requires a significantly higher amount of time than FACER-CD to give results on the same dataset. Our results can help researchers choose between deep learning-based models and clustering-based approaches for clone detection depending on their performance requirements.","tags":[],"title":"Comparing Clustering against Deep-Learning for Semantic Code Clone Detection","type":"project"},{"authors":["Shamsa Abid"],"categories":["LUMS"],"content":"","date":1630609888,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1630609888,"objectID":"79db44f8f7bcbc688494b5a31d9282d9","permalink":"https://shamsa-abid.github.io/project/lumsseminar2/","publishdate":"2021-09-03T00:11:28+05:00","relpermalink":"/project/lumsseminar2/","section":"project","summary":"Android developers often need to search for example code to complete their development tasks. While existing code search systems for Android can deliver code against a search query, they do not recommend code for features that a developer might later need to implement. We present FACER-AS (FACER for Android Studio); an Android Studio plugin provides relevant code against natural language queries (Stage 1) and also recommends code of multiple related features (Stage 2) to facilitate opportunistic code reuse. The FACER-AS tool uses FACER (Feature-driven API usage-based Code Examples Recommender) as its back-end code search and recommendation engine. FACER first constructs a code fact repository by parsing the source code of open-source Java projects to obtain methods' textual information, call graphs, and Application Programming Interface (API) usages. It then detects unique features by clustering methods based on similar API usages, where each cluster represents a feature or functionality. Finally, it detects frequently co-occurring features across projects using frequent pattern mining and recommends related methods from the mined patterns. To evaluate FACER-AS, we perform a user study involving one professional Android developer who uses our tool for the development of their ongoing live Android projects. We analyze the developer's usage of our tool over a span of seven days and find that FACER-AS achieves a 79% success rate for retrieving code against user queries (Stage 1) and a 41% success rate for recommending code for related features (Stage 2). We also observe a 43% reuse rate of Stage 1 recommendations and a 45% reuse rate of Stage 2 recommendations. Our tool's performance analysis and the developer's positive feedback show that FACER-AS can help Android developers with their coding activities.","tags":[],"title":"An API Usage-based Code Recommendation Tool for Android Studio","type":"project"},{"authors":["Shamsa Abid","Shafay Shamail","Hamid Abdul Basit","Sarah Nadi"],"categories":[],"content":"","date":1629158400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1629158400,"objectID":"a1aebc115ea6cfe8636bb76c665252f7","permalink":"https://shamsa-abid.github.io/publication/pub_facer_emse/","publishdate":"2021-08-17T00:00:00Z","relpermalink":"/publication/pub_facer_emse/","section":"publication","summary":"To save time, developers often search for code examples that implement their desired software features. Existing code search techniques typically focus on finding code snippets for a single given query, which means that developers need to perform a separate search for each desired functionality. In this paper, we propose FACER (Feature-driven API usage-based Code Examples Recommender, a technique that avoids repeated searches through opportunistic reuse. Specifically, given the selected code snippet that matches the initial search query, FACER finds and suggests related code snippets that represent features that the developer may want to implement next. FACER first constructs a code fact repository by parsing the source code of open-source Java projects to obtain methods' textual information, call graphs, and Application Programming Interface (API) usages. It then detects unique features by clustering methods based on similar API usages, where each cluster represents a feature or functionality. Finally, it detects frequently co-occurring features across projects using frequent pattern mining and recommends related methods from the mined patterns. To evaluate FACER, we run it on 120 Java Android apps from GitHub. We first manually validate that the detected method clusters represent methods with similar functionality. We then perform an automated evaluation to determine the best parameters (e.g., similarity threshold) for FACER. We recruit 10 professional developers along with 39 experienced students to judge FACER's recommendation of related methods. Our results show that, on average, FACER's recommendations are 80% precise. We also survey a total of 20 professional Android and Java developers to understand their code search and reuse experiences, and also to obtain their feedback on the usability and usefulness of FACER. The survey results show that 95% of our surveyed professional developers find the idea of related method recommendations useful during code reuse.","tags":[],"title":"FACER: An API Usage-based Code-example Recommender for Opportunistic Reuse","type":"publication"},{"authors":["Shamsa Abid"],"categories":[],"content":"","date":1565568000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1565568000,"objectID":"018f980517687c2bb2377d5357c77b8d","permalink":"https://shamsa-abid.github.io/publication/pub_facer/","publishdate":"2019-11-29T15:38:16+05:00","relpermalink":"/publication/pub_facer/","section":"publication","summary":"Developers need to be able to find reusable code for desired software features in a way that supports opportunistic programming for increased developer productivity. Our objective is to develop a recommendation system that provides a developer with function recommendations having functionality relevant to her development task. We employ a combination of information retrieval, static code analysis and data mining techniques to build the proposed recommendation system called FACER (Feature-driven API usage-based Code Examples Recommender). We performed an experimental evaluation on 122 projects from GitHub from selected categories to determine the accuracy of the retrieved code for related features. FACER recommended functions with a precision of 54% and 75% when evaluated using automated and manual methods respectively.","tags":[],"title":"Recommending Related Functions from API Usage-Based Function Clone Structures","type":"publication"},{"authors":["Shamsa Abid","Salman Javed","Momna Naseem","Suleman Shahid","Hamid Abdul Basit","Yoshiki Higo"],"categories":[],"content":"","date":1490572800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1490572800,"objectID":"ae78bc1fa2e3af3ac8d6494950b30dfe","permalink":"https://shamsa-abid.github.io/publication/pub_codeease/","publishdate":"2017-03-27T00:00:00Z","relpermalink":"/publication/pub_codeease/","section":"publication","summary":"Searching for code examples on the Internet is commonly and frequently performed by software developers but wastes a lot of their time and reduces their productivity. To aid developers with this problem, a system is needed that can allow them to get appropriate code recommendations for reuse within the IDE. In this paper, we present our prototype tool CodeEase, developed as an Eclipse plugin, which generates method recommendations against the code of the developer. The recommendations are based on clone detection and an analysis of Method Clone Structures (MCS) - a type of structural clones- from a large repository of code.","tags":[],"title":"CodeEase: Harnessing Method Clone Structures for Reuse","type":"publication"},{"authors":["Shamsa Abid","Zohaa Qamar","Natasha Khan","Muhammad Shayan","Hamid Abdul Basit"],"categories":[],"content":"","date":1480982400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1480982400,"objectID":"915a3fe103f4c3045462c993a3ad02cb","permalink":"https://shamsa-abid.github.io/publication/pub_dpers/","publishdate":"2016-12-06T00:00:00Z","relpermalink":"/publication/pub_dpers/","section":"publication","summary":"Software design patterns provide well-known solutions to recurring problems faced by developers. However, not all developers are proficient with the use of design patterns. To facilitate developers in this regard, we propose a design pattern usage examples retrieval system. The retrieval is based on analyzing the developer's development context to provide design pattern usage examples from projects that have a similar functional domain to that of the developer. In our approach, the Latent Dirichlet Allocation model is used to extract domain keywords from individual projects' source code. The domain keywords are stored in a fact repository and are used to construct the respective projects' profiles. We perform content-based retrieval by using a developer's domain keywords to retrieve only matching projects and their associated design patterns-based code (as design pattern usage examples) from the fact repository. Quantitative and qualitative analysis of the results from internal experiments and a user study indicate that our system provides fairly accurate results.","tags":[],"title":"Retrieving Design Pattern Usage Examples using Domain Matching","type":"publication"},{"authors":["Shamsa Abid","Hamid Abdul Basit"],"categories":[],"content":"","date":1463961600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1463961600,"objectID":"29f77e3421389b827f8e9669687c23c7","permalink":"https://shamsa-abid.github.io/publication/pub_towardsrecsys/","publishdate":"2016-05-23T00:00:00Z","relpermalink":"/publication/pub_towardsrecsys/","section":"publication","summary":"Structural clones cover all kinds of large-granularity repeated program structures such as similar methods, classes, directories, and their recurring combinations. We can use these structural clones to enable code completion by means of identification and recommendation of suitable candidates from a large code repository. By providing a user with recommendations based on Method Clone Structures (MCS) -- a type of structural clones -- mined from a large code repository, we are increasing our chances of recommending a set of methods that the developer is highly likely to use. The market basket analysis philosophy is implicitly manifested in our recommendation approach.","tags":[],"title":"Towards a Structural Clone Based Recommender System","type":"publication"},{"authors":["Shamsa Abid","Hamid Abdul Basit","Naveed Arshad"],"categories":[],"content":"","date":1434931200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1434931200,"objectID":"7e1d76df2c90546c8140f8fc0f9eddc6","permalink":"https://shamsa-abid.github.io/publication/pub_reflectionsonrefactoring/","publishdate":"2015-06-22T00:00:00Z","relpermalink":"/publication/pub_reflectionsonrefactoring/","section":"publication","summary":"Teaching refactoring effectively while making students realize the importance and benefits of refactoring is a challenge. In this direction, an experiment was carried out while conducting the course project for the Refactoring and Design Patterns course. This paper discusses the results of the experiment that involved two different project schemes to carry out refactoring activities on the same code base. One scheme was post-enhancement refactoring and the other was pre-enhancement refactoring. The aim of the experiment was to decide which scheme was beneficial in terms of better understanding, appreciation, and implementation of refactoring.","tags":[],"title":"Reflections on Teaching Refactoring: A Tale of Two Projects","type":"publication"},{"authors":[],"categories":[],"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"b03b3523835938d57475b57fb57c8778","permalink":"https://shamsa-abid.github.io/service/reviewing/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/service/reviewing/","section":"service","summary":" - [ACM International Conference on the Foundations of Software Engineering (FSE) 2025](https://conf.researchr.org/track/fse-2025/fse-2025-demonstrations) Program Committee Member in Demonstrations Track\n- [International Conference on Software Maintenance and Engineering (ICSME) 2025](https://conf.researchr.org/track/icsme-2025/icsme-2025-papers) Program Committee Member in Research Track\n- [International Conference on Software Maintenance and Engineering (ICSME) 2024](https://conf.researchr.org/track/icsme-2024/icsme-2024-papers) committee member\n- [Mining Software Repositories (MSR) 2024](https://2024.msrconf.org/track/msr-2024-technical-papers?) Committee Member in technical Track\n- [AI Foundation Models and Software Engineering (Forge 2024)](https://conf.researchr.org/track/forge-2024/forge-2024-papers?) Committee Member\n- [International Conference on Software Engineering (ICSE) 2023](https://conf.researchr.org/track/icse-2023/icse-2023-demonstrations?) Committee Member in Demonstrations track\n- [Mining Software Repositories (MSR) 2023](https://conf.researchr.org/track/msr-2023/msr-2023-industry-track?) Committee Member in Industry Track\n- [International Workshop on Interpretability and Robustness in Neural Software Engineering (InteNSE) 2023](https://intense23.github.io/#six) Committee Member\n- [Mining Software Repositories (MSR) 2021](https://2021.msrconf.org/track/msr-2021-shadow-pc?) Committee Member in Shadow PC committee within the    Shadow PC-track","tags":[],"title":"Conference Program Committee Membership","type":"service"},{"authors":[],"categories":[],"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"0f28560574a8621eed846f0363c3884b","permalink":"https://shamsa-abid.github.io/service/journalreviews/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/service/journalreviews/","section":"service","summary":" - [ACM Transactions on Software Engineering and Methodology (TOSEM)](https://dl.acm.org/journal/tosem/reviewers) reviewer 2024 2025\n- [Empirical Software Engineering (EMSE)](https://link.springer.com/journal/10664) journal reviewer 2024\n- [Journal of Behavior and Information Technology](https://www.tandfonline.com/journals/tbit20) reviewer in 2020 and 2021 ","tags":[],"title":"Journal Reviews","type":"service"}]